let isDone : boolean = false;
console.log(isDone);
// ??????? 16??, 10??, 2??, 8??? ????.

// Number ?? *************************************************
let decimal : number = 6;
let hex : number = 0xf00d;
let binary : number = 0b1010;
let octal : number = 0o744;

// String ??(",' ?? ?? ???? javascript? string type? ??.) *************************************************
let color : string = "blue";
color = 'red' ;

let fullName : string = `Bob Bobbington`;
let age : number = 37;
let sentence : string = `Hello, my name is ${fullName}.
I'll be ${age + 1} years old next month.`;

console.log(fullName);
console.log(age);
console.log(sentence);

// Array ??(??) *************************************************
// 1. ??? ??? type? ???? []? ?? ??
let list : number[] = [1,2,3];

// 2. generic array type ? Array? ?? ??
let list2 : Array<number> = [1,2,3];

// Tuple (? ??? ????????? ??? ??? ????.) *************************************************
// typescript? tuple? ?? ??? ?? ????? ???, ??? ??? ??? ??
// Tuple ??? ??? ?????.

// tuple type ??
let x : [string, number];

// ? ???
x = ["hello", 10]; //??

// type ??? ??? ??? ??? ???? ??
// x = [10, "hello"]; // error

// ??? ??? ??? ??? ??? ????.
// x = ["hello", 333, "hi"]; // error

// Enum (javascript?? ?? ??) *************************************************
enum Color {Red, Green, Blue}
let c : Color = Color.Green;

//enum? ?? ???? ?? 0??, ?? numbering?? ??? ????.
enum Color2 {Red = 1, Green, Blue}
let colorName : string = Color[2]; //Green?? ????. red?? 1???

// Any(?? ??? ?????? ??? ???) *************************************************
// ??? ????? ???? ?????.
// user input?? 3rd party?? ?? ???? any? ????? ??.
let notSure : any = 4;
notSure = "maybe a string instead";
notSure = false; // okay, definitely a boolean

// Void (void? any? ??? ????, ??? type? ??? ???. return ??? ?? ? ??????.) *************************************************
function warnUser() : void {
    console.log("This is my warning message");
}

// void type?? ????? ??? undefined? null? ?? ???? ??? ?? ????? ??.
// void? ??? ??? type? ???? ??? ??? ?

// Null, Undefined ? ??? type??? ?? ???? ??? ?? ? *************************************************
// ??? ?????.

// Never (?? ??? ?? ?? ?? ??, ?? ?? exception? ???? return?? ?? ?? ??? return type??.)

// error? ??? ??, never type??.
function error(message : string) : never {
    throw new Error(message);
}

// Inferred return type is never(??? ?? ??? never??.)
function fail() {
    return error("Something failed");
}

// return? ???? ?? never type? ??
function infiniteLoop() : never {
    while(true){

    }
}

// Object *************************************************
declare function create(o : object | null) : void;

create({prop : 0}); // OK
create(null); // OK

//create(42); // Error
//create("string"); // Error
//create(false); // Error
//create(undefined); //Error

// Type assertions *************************************************
// any ?? type?? ??? ??????, ??? ??? ??? ??? ???? ????
// 2?? ??? ??.

// 1. angle-bracket ??
let someValue : any = "this is a string";
let strLength : number  = (<string>someValue).length;

// 2. as ??
let someValue_2 : any = "this is a string";
let strLength2 : number = (someValue_2 as string).length;


